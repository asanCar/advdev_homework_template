#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh mvnCmd + " clean package -DskipTests"
      }

      // TBD: The next two stages should run in parallel
      stage('Run tests') {
        parallel 'Unit Tests': {
          // Using Maven run the unit tests
          stage('Unit Tests') {
            echo "Running Unit Tests"
  
            sh mvnCmd + " test"
          }
        },
 
        'Code Analysis': {
          // Using Maven to call SonarQube for Code Analysis
          stage('Code Analysis') {
            echo "Running Code Analysis"
  
            sh mvnCmd + " sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000 -DskipTests"
          }
        }
      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh mvnCmd + " deploy -DskipTests -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {
              openshift.selector("bc", "tasks").startBuild("--from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${prodTag}/tasks-${prodTag}.war", "--wait")
              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {
              def dc = openshift.selector("dc", "tasks").object()
              dc.spec.template.spec.containers[0].image = "docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag}"
              dc.spec.template.spec.containers[0].env[0].value = "${devTag} (tasks-dev)"
              openshift.apply(dc)
              if(openshift.selector("configmap", "tasks-config").exists()) {
                openshift.selector("configmap", "tasks-config").delete()
              }
              openshift.create("configmap", "tasks-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties")
              openshift.selector("dc", "tasks").rollout().latest()
              
              def dc_version = openshift.selector("dc", "tasks").object().status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()
              
              echo "Waiting for ReplicaController tasks-${dc_version} to be ready"
              while(rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }

              echo "Waiting web app to be ready"
              def devTasksRoute = sh(returnStdout: true, script: "curl -s tasks-${GUID}-tasks-dev.apps.${CLUSTER}").trim()
              while(!devTasksRoute.contains("tasks-dev")) {
                sleep 15
                devTasksRoute = sh(returnStdout: true, script: "curl -s tasks-${GUID}-tasks-dev.apps.${CLUSTER}").trim()
              }
            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --dest-creds=admin:redhat --src-creds=openshift:\$(oc whoami -t) docker://docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${prodTag}"

        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {
              openshift.tag("tasks:${devTag}", "tasks:${prodTag}")
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-prod") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              echo "Service active is ${activeApp}"
              if(activeApp == "tasks-green") {
                destApp = "tasks-blue"
              }
              dc = openshift.selector("dc", destApp).object()
              dc.spec.template.spec.containers[0].image = "docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag}"
              dc.spec.template.spec.containers[0].env[0].value = "${prodTag} (${destApp})"
              openshift.apply(dc)
              configmap = openshift.selector("configmap", destApp + "-config")
              if(configmap.exists()) {
                configmap.delete()
              }
              openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties")
              openshift.selector("dc", destApp).rollout().latest()

              def dc_version = openshift.selector("dc", destApp).object().status.latestVersion
              def rc = openshift.selector("rc", "${destApp}-${dc_version}").object()

              echo "Waiting for ReplicaController ${destApp}-${dc_version} to be ready"
              while(rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }
            }
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-prod") {
              def route = openshift.selector("route", "tasks").object()
              route.spec.to.name = destApp
              openshift.apply(route)
            }
          }
          echo "Waiting web app to be ready"
          def prodTasksRoute = sh(returnStdout: true, script: "curl -s tasks-${GUID}-tasks-prod.apps.${CLUSTER}").trim()
          while(!prodTasksRoute.contains("${destApp}")) {
            sleep 15
            prodTasksRoute = sh(returnStdout: true, script: "curl -s tasks-${GUID}-tasks-prod.apps.${CLUSTER}").trim()
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
